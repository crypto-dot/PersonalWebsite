---
	import Layout from '../layouts/Layout.astro';
	import friends from "../assets/friendsFixed.png";
	import Nav from "../components/Nav.astro";
	import Project from '../components/Project.astro';
	import AirBnB from "../assets/airBnBProject.png";
	import Amazon from "../assets/AmazonClone.png";
	import Weather from "../assets/WeatherApp.png";
	import Alien from "../assets/AlienRestaurant.png";
	import BusinessCard from "../assets/ReactBusinessCard.png";
	import SignUp from "../assets/SignUpProject.png";



	const link1 = "https://crypto-dot.github.io/AirBnB_Clone/";
	const link2 = "https://clone-e1507.web.app/";
	const link3 = "https://crypto-dot.github.io/WeatherApp/";
	const link4 = "https://crypto-dot.github.io/RestaurantPage/";
	const link5 = "https://crypto-dot.github.io/ReactBusinessCard/";
	const link6 = "https://crypto-dot.github.io/LoginPagePractice/";

---

<Layout title="Arbizu Portfolio Site">
	<section>
		<canvas id="mouseEffect"></canvas>
		<Nav></Nav>
		<div class="mainContainer">
			<div class="lineDesign">

			</div>
			<div class="hero">
				<h1>Hello! I'm <span class="coloredText">Carlos</span></h1>
				<p class="introText">I'm a fullstack software engineer who loves all aspects of web development.</p>
				<button onclick="window.location.href='mailto:CarlosJobOffers@proton.me'" class="actionButton">Get in
					Touch</button>

			</div>
			<img src={friends} />
		</div>
	</section>
	<section id="about">
		<div class="aboutContent">
			<h1>About</h1>
			<p>Iâ€™m a developer who has experience and practice with both frontend and backend technologies. In
				my off time I love to walk my dog and listen to some music. Learning new technologies is my passion, so
				feel free to reach out to me for any opportunities.</p>
		</div>
	</section>
	<section id="projects">
		<div class="projectContent">
			<h1>Projects</h1>
			<ul class="projects">
				<Project ariaLabel="link to airbnb clone" alt="airbnb clone" link={link1} img={AirBnB} />
				<Project ariaLabel="link to amazon clone" alt="amazon clone" link={link2} img={Amazon} />
				<Project ariaLabel="link to weather app" alt="Weather app" link={link3} img={Weather} />
			</ul>
			<ul class="projects">
				<Project ariaLabel="link to Alien project" alt="Alien project" link={link4} img={Alien} />
				<Project ariaLabel="link to business card application" alt="Business app" link={link5}
					img={BusinessCard} />
				<Project ariaLabel="link to login page project" alt="Login Page" link={link6} img={SignUp} />
			</ul>
		</div>
	</section>
</Layout>
<script>
	const canvas = document.getElementById("mouseEffect");
	const ctx = canvas.getContext('2d');
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	let particleArray = [];
	const numberOfParticles = 125;
	let lastScrolledLeft = 0;
	let lastScrolledTop = 0;

	const mouse = {
		x: null,
		y: null
	}
	window.addEventListener('mousemove', (e) => {
		mouse.x = e.pageX;
		mouse.y = e.pageY;
	});
	window.addEventListener("touchstart", (e) => {
		mouse.x = e.touches[0].pageX;
		mouse.y = e.touches[0].pageY;
	});
	window.addEventListener("touchend", (e) => {
		mouse.x = undefined;
		mouse.y = undefined;
	});
	window.addEventListener("touchmove", (e) => {
		e.preventDefault();
		mouse.x = e.touches[0].pageX;
		mouse.y = e.touches[0].pageY;
	});
	window.addEventListener('mouseleave', () => {
		mouse.x = undefined;
		mouse.y = undefined;
	});
	window.onresize = (e) => {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	}
	document.addEventListener("scroll", () => {
		let yPos = document.documentElement.scrollTop;
		let xPos = document.documentElement.scrollLeft;
		if (lastScrolledLeft != xPos) {
			console.log(mouse.x - lastScrolledLeft);
			mouse.x -= lastScrolledLeft;
			lastScrolledLeft = xPos;
			mouse.x += lastScrolledLeft;
		}
		if (lastScrolledTop != yPos) {
			mouse.y -= lastScrolledTop;
			lastScrolledTop = yPos;
			mouse.y += lastScrolledTop;
		}

	});

	class Particle {
		constructor(x, y, size, color, weight) {
			this.x = x;
			this.y = y;
			this.size = size;
			this.color = color;
			this.weight = weight;
		}
		update() {
			this.size -= 0.1;
			if (this.size < 0) {
				this.x = (mouse.x + ((Math.random() * 20) - 10));
				this.y = (mouse.y + ((Math.random() * 20) - 10));
				this.size = (Math.random() * 10) + 7;
				this.weight = (Math.random() * 2) - 0.5;
			}
			this.y += this.weight;
			this.weight += 0.05;

			if (this.y > canvas.height - this.size) {
				this.weight *= -0.2;
			}
		}
	}
	const init = () => {
		particleArray = [];
		for (let i = 0; i < numberOfParticles; i++) {
			let x = Math.random() * canvas.width;
			let y = Math.random() * canvas.height;
			let size = (Math.random() * 10) + 7;
			let color = `white`;
			let weight = 1;
			particleArray.push(new Particle(x, y, size, color, weight));
		}
	}

	const connect = () => {
		let opacityValue = 1;
		for (let a = 0; a < particleArray.length; a++) {
			for (let b = a; b < particleArray.length; b++) {
				let distance =
					(
						(particleArray[a].x - particleArray[b].x) *
						(particleArray[a].x - particleArray[b].x)
					) +
					(
						(particleArray[a].y - particleArray[b].y) *
						(particleArray[a].y - particleArray[b].y));
				if (distance < 2800) {
					opacityValue = 1 - (distance / 15000);
					ctx.strokeStyle = `rgba(255,255,255,${opacityValue})`;

					ctx.beginPath();
					ctx.lineWidth = .5;
					ctx.moveTo(particleArray[a].x, particleArray[a].y);
					ctx.lineTo(particleArray[b].x, particleArray[b].y);
					ctx.stroke();
				}
			}
		}
	}
	const animate = () => {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		for (let i = 0; i < particleArray.length; i++) {
			particleArray[i].update();
			// particleArray[i].draw();
		}
		connect();
		requestAnimationFrame(animate);
	}
	init();
	animate();
</script>

<style>
	* {
		padding: 0;
		margin: 0;
	}

	#mouseEffect {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -10;
	}


	.projects {
		display: flex;
		gap: 0rem;
	}

	.projectContent {
		padding-bottom: 10rem;
	}

	body {
		margin: 0;
		font-family: 'Sarabun', sans-serif;
		background: var(--main-bg-color);
		color: white;
	}

	.lineDesign {
		display: flex;
		align-items: flex-end;
		position: absolute;
		background: linear-gradient(to bottom, #EB21FC 0%, #46DCF0 105.48%);
		width: 2px;
		height: 36rem;
		margin-top: 12rem;
		margin-left: 4.5rem;
	}

	.gitLogoLineDesign {
		position: relative;
		top: 5rem;
		left: -1rem;
		;

	}

	.aboutContent,
	.projectContent {
		margin-left: 9rem;
		margin-top: 10rem;
	}

	ul {
		list-style: none;
	}

	.aboutContent h1::after,
	.projectContent h1::after {
		position: relative;
		display: block;
		top: 4rem;
		height: 2px;
		transform: rotate(0.02deg);
		content: "";
		width: 4.8ch;
		background: var(--gradient);
	}

	.projectContent h1::after {
		width: 6.5ch;
	}

	.aboutContent h1,
	.projectContent h1 {
		margin-bottom: 8rem;
	}

	.aboutContent p {
		font-size: 1.8rem;
		max-width: 28rem;
		line-height: 4.5rem;
	}

	.mainContainer {
		display: flex;
	}

	.mainContainer img {
		margin-top: 25vh;
		height: 50vw;
	}

	.actionButton {
		font-size: 2rem;
		font-weight: 300;
		font-family: 'Sarabun', sans-serif;
		color: white;
		width: 16rem;
		height: 4.5rem;
		border-radius: .4rem;
		border: 1px solid rgba(209, 209, 209, .5);
		background-color: rgba(255, 255, 255, 0.1);
		transition: .5s ease-in-out;
	}

	.actionButton:hover {
		cursor: pointer;
		transform: translateY(-10px);
		background: var(--gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		text-fill-color: transparent;

	}

	.introText {
		font-size: 2rem;
		margin: 4rem 0rem;
		font-weight: 200;
		max-width: 460px;
		line-height: 3.5rem;
	}


	.coloredText {
		background: var(--gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		text-fill-color: transparent;
	}



	h1 {
		font-size: 8rem;
		color: white;
		min-width: 7.6ch;
		line-height: 90%;
	}

	.hero {
		margin-left: 9rem;
		margin-top: 11rem;
	}


	@media (min-width: 1500px) {
		.mainContainer h1 {
			font-size: 9rem;
		}

		.introText {
			font-size: 2.5rem;
			line-height: 4rem;
		}

		.aboutContent p {
			font-size: 2rem;
			max-width: none;
			width: 30ch;
		}

		#mouseEffect {
			width: 100vw;
			height: 100vh;
		}
	}

	@media (min-width: 1600px) {
		.mainContainer h1 {
			font-size: 10rem;
		}
	}

	@media (min-width: 1700px) {
		.mainContainer h1 {
			font-size: 12rem;
		}

	}

	@media (min-width: 1800px) {
		.mainContainer h1 {
			font-size: 14rem;
		}

	}

	@media (min-width: 1900px) {
		.mainContainer h1 {
			font-size: 16rem;
		}

	}



	@media (min-width:1300px) {
		.mainContainer img {
			margin-top: 10vh;
		}
	}

	@media (max-width:1200px) {
		.mainContainer img {
			margin-top: 30vh;
			height: 45vw;
		}
	}

	@media (max-width:1000px) {
		.lineDesign {
			display: none;
		}

		.mainContainer h1 {
			font-size: 6rem;
		}

		.aboutContent,
		.projectContent,
		.hero {
			margin-left: 4rem;
		}

		.lineDesign {
			margin-left: 2rem;
			margin-top: 13rem;
		}
	}

	@media (max-width:850px) {
		.mainContainer img {
			margin-top: 30vh;
		}
	}

	@media (max-width:650px) {
		.mainContainer img {
			margin-top: 30vh;
			height: 80vw;
		}
	}

	@media (max-width:500px) {
		.mainContainer img {
			margin-top: 30vh;
			height: 90vw;
		}
	}

	@media (max-width: 400px) {
		.mainContainer img {
			margin-top: 40vh;
			height: 100vw;
		}
	}

	@media screen and (max-width: 300px) {

		.aboutContent,
		.projectContent {
			margin-left: 1rem;
		}

		.aboutContent p {
			max-width: none;
			width: 20rem;
		}
	}
</style>